{"version":3,"sources":["quotas.js","App.js","serviceWorker.js","index.js"],"names":["BKG_COLORS","QUOTAS_AND_AUTHORS","App","props","state","text","author","backgroundColor","color","handleClick","bind","quoteIndex","Math","floor","random","quotas","length","this","setState","className","style","id","icon","faQuoteRight","onClick","href","rel","target","data-size","faTwitter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAAMA,G,MAAa,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAChFC,EAAqB,CACvB,CAAC,2DAA4D,eAC7D,CAAC,yJAA0J,iBAC3J,CAAC,mHAAqH,cACtH,CAAC,sFAAuF,qBACxF,CAAC,qHAA2G,gBAC5G,CAAC,8EAA+E,iBAChF,CAAC,mFAAoF,qB,wCC6C1EC,E,YA1Cb,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,gBAAiB,CAACA,gBAAiB,IACnCC,MAAO,CAACA,MAAO,KAEjB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARJ,E,2EAWjB,IAAIC,EAAaC,KAAKC,MAAMD,KAAKE,SAAWC,EAA0BC,QACtEC,KAAKC,SAAS,CACZb,KAAMU,EAA0BJ,GAAY,GAC5CL,OAAQS,EAA0BJ,GAAY,GAC9CJ,gBAAiB,CAACA,gBAAiBQ,EAAkBJ,IACrDH,MAAO,CAACA,MAAOO,EAAkBJ,Q,0CAInCM,KAAKR,gB,+BAGL,OACE,yBAAKU,UAAU,YAAYC,MAAOH,KAAKb,MAAMG,iBAC3C,yBAAKc,GAAG,aACN,uBAAGA,GAAG,OAAOD,MAAOH,KAAKb,MAAMI,OAAO,0BAAMW,UAAU,WAAU,kBAAC,IAAD,CAAiBG,KAAMC,IAAcJ,UAAU,UAAgBF,KAAKb,MAAMC,MAC1I,uBAAGgB,GAAG,SAASD,MAAOH,KAAKb,MAAMI,OAAjC,MAA4CS,KAAKb,MAAME,OAAvD,KACA,0BAAMa,UAAU,WAChB,4BAAQE,GAAG,YAAYF,UAAU,SAASK,QAASP,KAAKR,YAAaW,MAAOH,KAAKb,MAAMG,iBAAvF,aACA,uBAAGkB,KAAM,yCAA2CR,KAAKb,MAAMC,KAAO,MAAQY,KAAKb,MAAME,OAAQe,GAAG,cAAeK,IAAI,sBAAsBC,OAAO,SAASR,UAAU,SAASC,MAAOH,KAAKb,MAAMG,gBAAiBqB,YAAU,SAC7N,0BAAMT,UAAU,eAAc,kBAAC,IAAD,CAAiBG,KAAMO,IAAWV,UAAU,WAE1E,kBAAC,IAAD,a,GAlCQW,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.906a9c27.chunk.js","sourcesContent":["const BKG_COLORS = ['#FEA47F', '#1B9CFC', '#D6A2E8', '#6D214F', '#CAD3C8', '#D6A2E8', '#EAB543'];\nconst QUOTAS_AND_AUTHORS = [\n    [\"Life is what happens when you're busy making other plans\", \"John Lennon\"],\n    ['When one door of happiness closes, another opens; but often we look so long at the closed door that we do not see the one which has been opened for us', 'Hellen Keller'],\n    ['Twenty years from now you will be more disappointed by the things that you didn\\'t do than by the ones you did do', 'Mark Twain'],\n    ['Great minds discuss ideas; average minds discuss events; small minds discuss people', 'Eleanor Roosevelt'],\n    ['Our greatest fear should not be of failure… but of succeeding at things in life that don’t really matter','Francis Chan'],\n    ['It is our choices, that show what we truly are, far more than our abilities', 'J. K. Rowling'],\n    ['Life is ten percent what happens to you and ninety percent how you respond to it', 'Charles Swindoll']\n    ];\n\nexport {BKG_COLORS, QUOTAS_AND_AUTHORS};","import React from 'react';\nimport './App.min.css';\nimport * as quotas from './quotas.js';\nimport ReactFCCtest from 'react-fcctest';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faQuoteRight } from  \"@fortawesome/free-solid-svg-icons\";\n\n\n\nclass App extends React.Component{\n  constructor(props) {\n      super(props);\n      this.state = {\n        text: '',\n        author: '',\n        backgroundColor: {backgroundColor: ''},\n        color: {color: ''}\n      }\n      this.handleClick = this.handleClick.bind(this);\n    }\n  handleClick(){\n    var quoteIndex = Math.floor(Math.random() * quotas.QUOTAS_AND_AUTHORS.length);\n    this.setState({\n      text: quotas.QUOTAS_AND_AUTHORS[quoteIndex][0],\n      author: quotas.QUOTAS_AND_AUTHORS[quoteIndex][1],\n      backgroundColor: {backgroundColor: quotas.BKG_COLORS[quoteIndex]},\n      color: {color: quotas.BKG_COLORS[quoteIndex]}\n    })\n  }\n  componentDidMount(){\n    this.handleClick()\n  }\n  render(){\n    return (\n      <div className='container' style={this.state.backgroundColor}>\n        <div id=\"quote-box\" >\n          <p id=\"text\" style={this.state.color}><span className=\"iconBox\"><FontAwesomeIcon icon={faQuoteRight} className=\"icon\"/></span>{this.state.text}</p>\n          <p id=\"author\" style={this.state.color}> - {this.state.author} </p>\n          <span className=\"buttons\">\n          <button id=\"new-quote\" className=\"button\" onClick={this.handleClick} style={this.state.backgroundColor}>new quote</button>\n          <a href={\"https://twitter.com/intent/tweet?text=\" + this.state.text + \" - \" + this.state.author} id=\"tweet-quote\"  rel='noopener noreferrer' target=\"_blank\" className=\"button\" style={this.state.backgroundColor} data-size='large'>\n          <span className=\"twitterIcon\"><FontAwesomeIcon icon={faTwitter} className='icon'/></span>\n          </a>\n          <ReactFCCtest/>\n          </span>\n        </div>\n      </div>\n      )\n  }\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}